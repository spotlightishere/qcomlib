package qcomlib

import (
	"bytes"
	"errors"
)

var (
	RequestHello           = []byte{0x01, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x78, 0x56, 0x34, 0x12}
	RequestHelloTwo        = []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x78, 0x56, 0x34, 0x12}
	RequestMsgHas          = []byte{0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00, 0x00, 0x00, 0x96, 0x00, 0x00, 0x2f, 0x6d, 0x73, 0x67, 0x5f, 0x68, 0x61, 0x73, 0x78, 0x56, 0x34, 0x12}
	RequestSoftwareVersion = []byte{0xc, 0x14, 0x3a, 0x7e}
)

var (
	ResponseHello = []byte{0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x1c, 0x00, 0x00, 0x00, 0x78, 0x56, 0x34, 0x12}
)

var (
	ErrInvalidResponse = errors.New("device did not respond with expected data")
)

// immediateResponse allows sending data and immediately reading the response.
func (q *QcomDevice) immediateResponse(request []byte) ([]byte, error) {
	if err := q.Write(request); err != nil {
		return nil, err
	}

	response, err := q.Read()
	if err != nil {
		return nil, err
	}

	return response, nil
}

func (q *QcomDevice) Hello() error {
	if err := q.Write(RequestHello); err != nil {
		return err
	}

	if err := q.Write(RequestHelloTwo); err != nil {
		return err
	}

	response, err := q.Read()
	if err != nil {
		return err
	}

	if bytes.Compare(response, ResponseHello) != 0 {
		return ErrInvalidResponse
	} else {
		return nil
	}
}

func (q *QcomDevice) SendSPC(pin string) ([]byte, error) {
	response, err := q.immediateResponse([]byte{0x41, 0x31, 0x31, 0x31, 0x31, 0x31, 0x31, 0x5e, 0xc5, 0x7e})
	//response, err := q.immediateResponse([]byte{0x41, pin[0], pin[1], pin[2], pin[3], pin[4], pin[5], 0x5e, 0xc5, 0x7e})
	if err != nil {
		return nil, err
	}

	return response, nil
}
